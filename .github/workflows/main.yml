on:
  push:

env:
  PHP_VERSION: 8.2
  NODE_VERSION: 18

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      APP_ENV: dev
      APP_DEBUG: 1
    steps:
      - uses: actions/checkout@v3

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ env.PHP_VERSION }}"
          tools: composer:v2, composer-require-checker, symfony
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: Install PHP dependencies
        run: composer install -n --prefer-dist

      - name: Install and Build Yarn dependencies
        run: yarn install --no-progress --non-interactive && yarn build

      - name: Run Static test and Code validation
        run: |
          composer validate --no-check-publish
          composer-require-checker check
          symfony security:check --disable-exit-code
          vendor/bin/ecs check src
          vendor/bin/phpstan analyse -c phpstan.neon
          bin/console lint:twig templates/
          yarn run eslint .eslintrc.js

  deploy:
    name: Build and Deploy to production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch' && github.ref_name == 'master'
    env:
      APP_ENV: prod
      APP_DEBUG: 0
    environment:
      name: production
      url: https://store.magentify.it
    steps:
      - uses: actions/checkout@v3

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ env.PHP_VERSION }}"
          tools: composer:v2, deployer:v7.3.0
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: Install PHP dependencies without developer dependencies
        run: composer install --verbose --prefer-dist --no-progress --no-interaction --optimize-autoloader --no-suggest --no-dev

      - name: Install and Build Yarn dependencies
        run: yarn install --no-progress --non-interactive && yarn build

      - name: Compress the artifact
        run: |
          rm -rf .git .github node_modules tests assets
          zip --symlinks -q -r build.zip .

      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Deploy to Production
        run: |
          echo '${{ secrets.KNOWN_HOSTS }}' >> ~/.ssh/known_hosts
          echo '${{ secrets.HOSTS_YML }}' > hosts.yml
          deployer deploy production -vvv
